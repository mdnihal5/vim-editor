" ---------------- Plugin Setup ----------------
call plug#begin('~/.vim/plugged')
Plug 'joshdick/onedark.vim'
call plug#end()

" ---------------- Colorscheme ----------------
syntax on
colorscheme onedark

" ---------------- General Settings ----------------
set number
set relativenumber
set tabstop=5
set shiftwidth=5
set expandtab
set mouse=a
set clipboard=unnamedplus        " Enable system clipboard

" ---------------- Copy/Paste Key Mappings ----------------
nnoremap <C-c> "+y
vnoremap <C-c> "+y
inoremap <C-c> <C-o>"+yy
nnoremap <C-p> "+p
vnoremap <C-p> "+p
inoremap <C-p> <C-r><C-o>+
nnoremap <C-a> ggVG"+y
inoremap <C-a> <C-o>:call FormatAndCopyToClipboard()<CR>

" ---------------- Formatting ----------------
nnoremap <C-f> :call Format()<CR>
inoremap <C-f> <C-o>:call Format()<CR>

function! Format()
    silent! execute 'norm! mz'
    if &ft ==? 'c' || &ft ==? 'cpp' || &ft ==? 'php'
        set formatprg=astyle\ --mode=c
        silent! execute 'norm! gggqG'
    elseif &ft ==? 'java'
        set formatprg=astyle\ --mode=java
        silent! execute 'norm! gggqG'
    endif
    silent! call RemoveTrailingSpaces()
    silent! execute 'retab'
    silent! execute 'gg=G'
    silent! execute 'norm! `z'
    set formatprg=
endfunction

function! RemoveTrailingSpaces()
    silent! execute '%s/\s\+$//ge'
    silent! execute 'g/\v^$\n*%$/norm! dd'
endfunction

function! FormatAndCopyToClipboard()
    let save_cursor = getpos('.')
    %!astyle
    normal! ggVG
    normal! "+y
    call setpos('.', save_cursor)
    write
endfunction

" ---------------- Comment Toggle ----------------
function! ToggleComment()
    if mode() ==# 'v'
        '<,'>s/^/\<C-r>=CommentChar()<CR>/
    else
        s/^/\<C-r>=CommentChar()<CR>/
    endif
endfunction

function! CommentChar()
    if &filetype == 'python' || &filetype == 'sh' || &filetype == 'bash'
        return '# '
    elseif &filetype == 'c' || &filetype == 'cpp' || &filetype == 'java'
        return '// '
    elseif &filetype == 'html'
        return '<!-- '
    else
        return '# '
    endif
endfunction

nnoremap <Leader>/ :call ToggleComment()<CR>
vnoremap <Leader>/ :call ToggleComment()<CR>

" ---------------- Compile and Run (C++) ----------------
function! CompileAndRun(flags, input, clear_output, output_file)
    execute 'w'
    let l:cmd = ''
    if a:clear_output
        let l:cmd .= 'clear && '
    endif
    let l:cmd .= 'g++ ' . a:flags . ' -o %< % -Wno-misleading-indentation -Wno-unused-variable -Wno-sign-compare'
    if !empty(a:input)
        let l:cmd .= ' && ./%< < ' . a:input
    else
        let l:cmd .= ' && ./%<'
    endif
    if !empty(a:output_file)
        let l:cmd .= ' > ' . a:output_file
    endif
    execute '!' . l:cmd
endfunction

let g:common_flags = '-std=c++20 -Wall -Wextra -Wshadow -DONPC -Wno-misleading-indentation -Wno-unused-variable -Wno-sign-compare'

nnoremap <F7> :call CompileAndRun(g:common_flags . ' -O3 -DDEBUG -g -fsanitize=undefined,address', '', 0, '')<CR>
inoremap <F7> <ESC> :call CompileAndRun(g:common_flags . ' -O3 -DDEBUG -g -fsanitize=undefined,address', '', 0, '')<CR>

nnoremap <F8> :call CompileAndRun(g:common_flags . ' -O3 -DDEBUG -g', '', 1, '')<CR>
inoremap <F8> <ESC> :call CompileAndRun(g:common_flags . ' -O3 -DDEBUG -g', '', 1, '')<CR>

nnoremap <F9> :call CompileAndRun(g:common_flags . ' -O3 -DDEBUG -g -fsanitize=undefined,address', '', 0, 'output.txt')<CR>
inoremap <F9> <ESC> :call CompileAndRun(g:common_flags . ' -O3 -DDEBUG -g -fsanitize=undefined,address', '', 0, 'output.txt')<CR>

nnoremap <F11> :call CompileAndRun(g:common_flags . ' -O2 -fsanitize=address', 10, 'inp')<CR>
inoremap <F11> <ESC> :call CompileAndRun(g:common_flags . ' -O2 -fsanitize=address', 10, 'inp')<CR>

" ---------------- Save and Compile ----------------
noremap <F4> <ESC>:w<CR>:make<CR>
inoremap <F4> <ESC>:w<CR>:make<CR>

