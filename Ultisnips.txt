snippet snips "show snippets"
/*
   1. normal -> templete
   2. simple -> simple templete
   3. c++ -> basic c++ templete
   4. segtree -> segtree
   5. lazysegtree -> lazysegtree
   6. primes ->"prime operations
   7. binpower -> binexpo
   8. inverse -> modinverse
   9. orderedset -> pbds
   10. combinations -> nCr
   11. dijkstra -> dijkstra
   12. DSU -> UnionFind
   13. Graph -> Graph
   14. Zalgo -> Z algorithm
   15. StringHash -> string hashing
 */
endsnippet
snippet normal "normal"
// Author : md_nihal

#include "bits/stdc++.h"
using namespace std;

#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math,inline")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,lzcnt,mmx,abm,avx,avx2,fma")
#define Md_Nihal ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef unsigned long long ull;
#define endl "\n"
#define int long long
#define i_64 int64_t
#define sz(a) (int)a.size()
#define vi vector<int>
#define pii pair<int,int>
#define vpi vector<pii>
#define all(x) x.begin(),x.end()
#define ALL(x) x.rbegin(),x.rend()
#define rep(i,x,n) for (int i = x; i <x+n; i++)
const int mod = 1E9 + 7, inf = 1E18, N = 1E6 + 7, MAX = 1E14 + 4;

template<class T, class V>istream &operator>> (istream &in, pair<T, V> &a) {in >> a.first >> a.second; return in;}
template<class T>istream &operator>> (istream &in, vector<T> &a) {for (auto &i : a) {in >> i;} return in;}
template<class T, class V>ostream &operator<< (ostream &os, pair<T, V> &a) {os << a.first << " " << a.second; return os;}
template<class T>ostream &operator<< (ostream &os, vector<T> &a) {for (auto &i : a) {os << i << " ";} return os;}

/*----------------------------------------------- PBDS --------------------------------------------*/

using namespace __gnu_pbds;
template<class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;
template<class key, class value, class cmp = less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;

/*----------------------------------------------- PBDS ends --------------------------------------------*/

#ifndef ONLINE_JUDGE
    #include "/home/anonymous/Templates/debug.hpp"
#else
    #define debug(x...);
#endif

/*=========================================== SOLUTION ===========================================*/

void ____solve() {

    $0

}

/*============================================= MAIN =============================================*/

int32_t  main() {
    Md_Nihal;
    int Testcases = 1;    $1cin >> Testcases;

    for (int i = 0; i < Testcases; i++, ____solve(), cout << endl);
}
endsnippet

snippet simple "basic"
#include "bits/stdc++.h"
using namespace std;
#define all(x) x.begin(),x.end()
#define ALL(x) x.rbegin(),x.rend()
#define int long long
const int mod = 1E9 + 7, MAX = 1E7 + 7, N = 1E5 + 5, inf = 1E18 ;

#ifndef ONLINE_JUDGE
    #include "/home/anonymous/Templates/debug.hpp"
#else
    #define debug(x...);
#endif

/*=========================================== SOLUTION ===========================================*/

void ____solve() {

    $0

}

/*============================================= MAIN =============================================*/

int32_t main() {
    int Test = 1;  $1cin >> Test;

    for (int i = 0; i < Test; i++, ____solve(), cout << endl);
}

endsnippet
snippet c++ "basic"
#include<bits/stdc++.h>
using namespace std;
void __solve() {

    $0
}

int main() {
    int T = 1; $1cin >> T;

    while (T--) __solve();
}
endsnippet
snippet segtree "segmenttree"
template<typename T>
struct SegmentTree {
    int n;
    const T id;
    vector<T> st;

    T merge (const T &a, const T &b) {
        return a + b;
    }

    SegmentTree (int _n) : n (_n), st (2 * n, id) {}

    SegmentTree (const vector<T> &a) : n ( (int) a.size() ), st (2 * n) {
        for (int i = 0; i < n; i++)
            st[i + n] = a[i];

        for (int i = n - 1; i > 0; i--)
            st[i] = merge (st[i << 1], st[i << 1 | 1]);
    }

    T query (int l, int r) {
        T ls = id, rs = id;

        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
            if (l & 1) ls = merge (ls, st[l++]);

            if (r & 1) rs = merge (st[--r], rs);
        }

        return merge (ls, rs);
    }

    void update (int p, T val) {
        for (st[p += n] = val, p >>= 1; p > 0; p >>= 1)
            st[p] = merge (st[p << 1], st[p << 1 | 1]);
    }
};
endsnippet
snippet lazysegtree "lazysegmenttree"
template <typename T, typename U>
struct SegTree {
    struct Node {
        T val = T();
        U lazy = U();

        void apply (int l, int r, const U &upd) {
            val += upd * (r - l + 1);
            lazy += upd;
        }
    };

    int n;
    std::vector<Node> seg;

    Node merge (const Node &a, const Node &b) const {
        Node res;
        res.val = a.val + b.val;
        return res;
    }

    void push (int l, int r, int pos) {
        if (seg[pos].lazy != U() ) {
            int mid = (l + r) / 2;
            seg[pos * 2].apply (l, mid, seg[pos].lazy);
            seg[pos * 2 + 1].apply (mid + 1, r, seg[pos].lazy);
            seg[pos].lazy = U();
        }
    }

    void build (int l, int r, int pos) {
        if (l == r) return;

        int mid = (l + r) / 2;
        build (l, mid, pos * 2);
        build (mid + 1, r, pos * 2 + 1);
        pull (pos);
    }

    template <typename V>
    void build (int l, int r, int pos, const std::vector<V> &v) {
        if (l == r) {
            seg[pos].apply (l, r, v[l]);
            return;
        }

        int mid = (l + r) / 2;
        build (l, mid, pos * 2, v);
        build (mid + 1, r, pos * 2 + 1, v);
        pull (pos);
    }

    void pull (int pos) {
        seg[pos] = merge (seg[pos * 2], seg[pos * 2 + 1]);
    }

    Node query (int l, int r, int pos, int ql, int qr) {
        push (l, r, pos);

        if (l > qr || r < ql) return Node();

        if (l >= ql && r <= qr) return seg[pos];

        int mid = (l + r) / 2;
        return merge (query (l, mid, pos * 2, ql, qr), query (mid + 1, r, pos * 2 + 1, ql, qr) );
    }

    void modify (int l, int r, int pos, int ql, int qr, const U &v) {
        push (l, r, pos);

        if (l > qr || r < ql) return;

        if (l >= ql && r <= qr) {
            seg[pos].apply (l, r, v);
            return;
        }

        int mid = (l + r) / 2;
        modify (l, mid, pos * 2, ql, qr, v);
        modify (mid + 1, r, pos * 2 + 1, ql, qr, v);
        pull (pos);
    }

    SegTree (int _n) : n (_n) {
        seg.resize (4 * n + 1);
        build (1, n, 1);
    }

    template <typename V>
    SegTree (int _n, const std::vector<V> &v) : n (_n) {
        seg.resize (4 * n + 1);
        build (1, n, 1, v);
    }

    Node query (int l, int r) {
        return query (1, n, 1, l, r);
    }

    Node query (int x) {
        return query (1, n, 1, x, x);
    }

    void modify (int ql, int qr, const U &v) {
        modify (1, n, 1, ql, qr, v);
    }
};
endsnippet

snippet primes "prime operations"
bool marked[N];
int  sp[N];

void Sieve() {
    for (int i = 2; i < N; i += 2)  sp[i] = 2;//even numbers have smallest prime factor 2

    for (int i = 3; i < N; i += 2) {
        if (!marked[i]) {
            sp[i] = i;

            for (int j = i; (j * i) < N; j += 2) {
                if (!marked[j * i]) marked[j * i] = true, sp[j * i] = i;
            }
        }
    }
}


vector <int> factorize (int k) {
    vector <int> ans;

    while (k > 1) {
        ans.push_back (sp[k]);
        k /= sp[k];
    }

    return ans;
}
endsnippet

snippet binpower "binpow"
template<typename T>
T binpow (T a, T b) {
    T ans = 1;

    while (b) {
        if (b & 1) {
            ans = 1LL * ans * a % mod;
        }

        a = 1LL * a * a % mod;
        b >>= 1;
    }

    return ans;
}
endsnippet

snippet inverse "any mod inverse"
ll inv (ll a, ll m) {
    if (a == 1) {
        return 1;
    }

    return (1LL - inv (m % a, a) * m) / a + m;
}
endsnippet

snippet orderedset "orderedset"
using namespace __gnu_pbds;
template<class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;
template<class key, class value, class cmp = less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;
endsnippet
snippet FenwickTree "FenwickTree"
class FenwickTree {
    vector<int>tree;
    int size;
  public:
    FenwickTree (int n) : tree (n + 1, 0), size (n) {};
    void update (int idx, int add) {
        for (++idx; idx <= size; idx += idx & -idx) {
            tree[idx] += add;
        }
    }
    int query (int idx) {
        int sum = 0;

        for (++idx; idx > 0; idx -= idx & -idx) {
            sum += tree[idx];
        }

        return sum;
    }
    int sum (int l, int r) {
        return query (r) - query (l - 1);
    }
    int lower_bound (int val) {
        int ind = 0, sum = 0;

        for (int i = 20; i >= 0; i--) {
            if ( ind + (1 << i) <= size && tree[ind + (1 << i)] + sum < val) {
                ind += (1 << i);
                sum += tree[ind];
            }
        }

        return ind + 1;
    }
};
endsnippet
snippet combinations "combinations"
int fact[N];
int exp (int a, int b) {
    int ans = 1;
    a %= mod;

    while (b) {
        if (b & 1) ans = (ans * 1ll * a) % mod;

        b >>= 1;
        a = (a * 1ll * a) % mod;
    }

    return ans;
}
int nCr (int a, int b) {
    if (b > a) return 0;

    return fact[a] * 1ll * exp (fact[b] * 1ll * fact[a - b] % mod, mod - 2) % mod;
}
endsnippet
snippet dijkstra "dikstra"
vector<int>dikstra (vector<vector<pii>> &graph, int source, int n) {
    priority_queue<pii, vector<pii>, greater<pii>>pq;
    vector<int>dist (n, inf);
    dist[source] = 0;
    pq.push ({0, source});

    while (!pq.empty() ) {
        auto [currDistance, node] = pq.top();
        pq.pop();

        if (currDistance != dist[node]) continue;

        for (auto [neighbour, weight] : graph[node]) {
            if (dist[neighbour] > dist[node] + weight) {
                dist[neighbour] = dist[node] + weight; pq.push ({dist[neighbour], neighbour});
            }
        }
    }

    return dist;
}
endsnippet
snippet DSU "Union Find"
class DSU {
    std::vector<int>par, size;
  public:
    DSU (int n) : par (n + 5), size (n + 5) {
        for (int i = 1; i <= n; i++) size[i] = 1, par[i] = i;
    }
    int parent (int x) {
        return (par[x] == x ? x : parent (par[x]) );
    }
    void unite (int x, int y) {
        int rootx = parent (x), rooty = parent (y);

        if (rootx == rooty) return;

        if (size[rootx] < size[rooty]) swap (rootx, rooty);

        par[rooty] = rootx;
        size[rootx] += size[rooty];
    }
    bool connected (int x, int y) {
        return parent (x) == parent (y);
    }
    int get_size (int x) {
        return size[parent (x)];
    }
};
endsnippet
snippet Graph "graph"
template <typename T>
class Graph {
  public:
    Graph (int n) : n (n), adj (n) {}
    void add (T u, T v) {
        adj[u].push_back (v);
        adj[v].push_back (u);
    }
    const vector<vector<T>> &get() const {
        return adj;
    }
  private:
    int n;
    vector<vector<T>> adj;
};
endsnippet
snippet Zalgo "z algorithm"
class Zalgo {
  private:
    string text;
    string pattern;
    vector<int> Z;
    vector<int> calculateZ (const string &s) {
        int n = s.length();
        vector<int> Z (n, 0);
        int l = 0, r = 0;

        for (int i = 1; i < n; ++i) {
            if (i <= r)
                Z[i] = min (r - i + 1, Z[i - l]);

            while (i + Z[i] < n && s[Z[i]] == s[i + Z[i]])
                ++Z[i];

            if (i + Z[i] - 1 > r) {
                l = i;
                r = i + Z[i] - 1;
            }
        }

        return Z;
    }
  public:
    ZAlgorithm (const string &txt, const string &pat) : text (txt), pattern (pat) {
        string combined = pattern + "$" + text;
        Z = calculateZ (combined);
    }
    vector<int> findOccurrences() {
        int patternLength = pattern.length();
        vector<int> occurrences;

        for (int i = patternLength + 1; i < Z.size(); ++i) {
            if (Z[i] == patternLength)
                occurrences.push_back (i - patternLength - 1);
        }

        return occurrences;
    }
};
endsnippet
snippet StringHash "string hashing"
#define MAXLEN 1000010
constexpr uint64_t prime = (1ULL << 61) - 1;
const uint64_t seed = chrono::system_clock::now().time_since_epoch().count();
const uint64_t base = mt19937_64 (seed) () % (prime / 3) + (prime / 3);
uint64_t base_pow[MAXLEN];
int64_t primemul (uint64_t a, uint64_t b) {
    uint64_t l1 = (uint32_t) a, h1 = a >> 32, l2 = (uint32_t) b, h2 = b >> 32;
    uint64_t l = l1 * l2, m = l1 * h2 + l2 * h1, h = h1 * h2;
    uint64_t ret = (l & prime) + (l >> 61) + (h << 3) + (m >> 29) + (m << 35 >> 3) + 1;
    ret = (ret & prime) + (ret >> 61);
    ret = (ret & prime) + (ret >> 61);
    return ret - 1;
}
void init() {
    base_pow[0] = 1;

    for (int i = 1; i < MAXLEN; i++) {
        base_pow[i] = primemul (base_pow[i - 1], base);
    }
}
struct PolyHash {
    /// Remove suff vector and usage if reverse hash is not required for more speed
    vector<int64_t> pref;

    PolyHash() {}

    template <typename T>
    PolyHash (const vector<T> &ar) {
        if (!base_pow[0]) init();

        int n = ar.size();
        assert (n < MAXLEN);
        pref.resize (n + 3, 0);

        for (int i = 1; i <= n; i++) {
            pref[i] = primemul (pref[i - 1], base) + ar[i - 1] + 997;

            if (pref[i] >= prime) pref[i] -= prime;
        }
    }
    PolyHash (const string &str)
        : PolyHash (vector<char> (str.begin(), str.end() ) ) {}

    uint64_t hash (int l, int r) {
        int64_t h = pref[r + 1] - primemul (base_pow[r - l + 1], pref[l]);
        return h < 0 ? h + prime : h;
    }

    uint64_t combine (uint64_t hash1, uint64_t hash2, int len2) {
        return (primemul (hash1, base_pow[len2]) + hash2) % prime;
    }

};

endsnippet
snippet ModInt "modint1"
using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
template<typename T>
constexpr T power (T a, u64 b) {
    T res{1};

    for (; b; b /= 2, a *= a)
        if (b % 2) res *= a;

    return res;
}

template<u32 P>
constexpr u32 mulMod (u32 a, u32 b) {
    return 1ULL * a * b % P;
}

template<u64 P>
constexpr u64 mulMod (u64 a, u64 b) {
    u64 res = a * b - u64 (1.L * a * b / P - 0.5L) * P;
    return res %= P, res;
}

template<typename U, U P>
requires std::unsigned_integral<U>
struct ModIntBase {
    constexpr ModIntBase() : x{0} {}
    template<typename T> requires std::integral<T>
    constexpr ModIntBase (T x_) : x{norm (x_ % T{P}) } {}

    constexpr static U norm (U x) {
        if (x >> (8 * sizeof (U) - 1) ) x += P;

        return x >= P ? x - P : x;
    }

    constexpr U val() const { return x; }
    constexpr ModIntBase operator-() const { return ModIntBase{norm (P - x) }; }
    constexpr ModIntBase inv() const { return power (*this, P - 2); }

    constexpr ModIntBase &operator*= (const ModIntBase &rhs) & { return x = mulMod<P> (x, rhs.x), *this; }
    constexpr ModIntBase &operator+= (const ModIntBase &rhs) & { return x = norm (x + rhs.x), *this; }
    constexpr ModIntBase &operator-= (const ModIntBase &rhs) & { return x = norm (x - rhs.x), *this; }
    constexpr ModIntBase &operator/= (const ModIntBase &rhs) & { return *this *= rhs.inv(); }

    friend constexpr ModIntBase operator* (ModIntBase lhs, const ModIntBase &rhs) { return lhs *= rhs; }
    friend constexpr ModIntBase operator+ (ModIntBase lhs, const ModIntBase &rhs) { return lhs += rhs; }
    friend constexpr ModIntBase operator- (ModIntBase lhs, const ModIntBase &rhs) { return lhs -= rhs; }
    friend constexpr ModIntBase operator/ (ModIntBase lhs, const ModIntBase &rhs) { return lhs /= rhs; }
    friend constexpr std::ostream &operator<< (std::ostream &os, const ModIntBase &a) { return os << a.val(); }
    friend constexpr bool operator== (ModIntBase lhs, ModIntBase rhs) { return lhs.x == rhs.x; }
    friend constexpr bool operator!= (ModIntBase lhs, ModIntBase rhs) { return lhs.x != rhs.x; }
    friend constexpr bool operator< (ModIntBase lhs, ModIntBase rhs) { return lhs.x < rhs.x; }
    friend constexpr bool operator> (ModIntBase lhs, ModIntBase rhs) { return lhs.x > rhs.x; }


  private:
    U x;
};

template<u32 P> using ModInt = ModIntBase<u32, P>;
template<u64 P> using ModInt64 = ModIntBase<u64, P>;

constexpr u32 P = 1000000007;
using Mint = ModInt<P>;

struct Comb {
    int n = 0;
    std::vector<Z> _fac{1}, _invfac{1}, _inv{0};

    void init (int m) {
        if (m <= n) return;

        _fac.resize (m + 1);
        _invfac.resize (m + 1);
        _inv.resize (m + 1);

        for (int i = n + 1; i <= m; ++i) _fac[i] = _fac[i - 1] * i;

        _invfac[m] = _fac[m].inv();

        for (int i = m; i > n; --i) _invfac[i - 1] = _invfac[i] * i, _inv[i] = _invfac[i] * _fac[i - 1];

        n = m;
    }

    Mint fac (int m) { if (m > n) init (2 * m); return _fac[m]; }
    Mint invfac (int m) { if (m > n) init (2 * m); return _invfac[m]; }
    Mint inv (int m) { if (m > n) init (2 * m); return _inv[m]; }
    Mint binom (int n, int m) { return n < m || m < 0 ? 0 : fac (n) * invfac (m) * invfac (n - m); }
} comb;
endsnippet
snippet Modint "modint2"
template<int MOD = 1000000007>
struct ModInt {
    long long v;
    ModInt (long long _v = 0) {v = (-MOD < _v && _v < MOD) ? _v : _v % MOD; if (v < 0) v += MOD;}
    ModInt &operator += (const ModInt &other) {v += other.v; if (v >= MOD) v -= MOD; return *this;}
    ModInt &operator -= (const ModInt &other) {v -= other.v; if (v < 0) v += MOD; return *this;}
    ModInt &operator *= (const ModInt &other) {v = v * other.v % MOD; return *this;}
    ModInt &operator /= (const ModInt &other) {return *this *= inverse (other);}
    bool operator == (const ModInt &other) const {return v == other.v;}
    bool operator != (const ModInt &other) const {return v != other.v;}
    bool operator < (const ModInt &other) const {return v < other.v;}
    bool operator > (const ModInt &other) const {return v > other.v;}
    friend ModInt operator + (ModInt a, const ModInt &b) {return a += b;}
    friend ModInt operator - (ModInt a, const ModInt &b) {return a -= b;}
    friend ModInt operator * (ModInt a, const ModInt &b) {return a *= b;}
    friend ModInt operator / (ModInt a, const ModInt &b) {return a /= b;}
    friend ModInt operator - (const ModInt &a) {return 0 - a;}
    friend ModInt power (ModInt a, long long b) {ModInt ret (1); while (b > 0) {if (b & 1) ret *= a; a *= a; b >>= 1;} return ret;}
    friend ModInt inverse (ModInt a) {return power (a, MOD - 2);}
    friend istream &operator >> (istream &is, ModInt &m) {is >> m.v; m.v = (-MOD < m.v && m.v < MOD) ? m.v : m.v % MOD; if (m.v < 0) m.v += MOD; return is;}
    friend ostream &operator << (ostream &os, const ModInt &m) {return os << m.v;}
};
using Mint = ModInt<mod>;
/*Mint a=2;
 * cout<<power(a,3);
 * assert(a*inverse(a)==1)
 */
endsnippet
snippet Blift "binary lifting"
struct BinaryLift {
    int n, lg;
    vector<int> depth;
    vector<vector<int>> adj, up;
    BinaryLift (int _n) : n (_n), lg (__lg (n - 1) + 1), depth (n), adj (n), up (lg, vector<int> (n, 0) ) {}
    void addEdge (int u, int v) {
        adj[u].push_back (v);
        adj[v].push_back (u);
    }
    void init (int r = -1) {
        if (r == -1) {
            for (int u = 0; u < n; u++)
                if (up[0][u] == -1)
                    dfs (u);

        } else {
            dfs (r);
        }

        for (int i = 1; i < lg; i++)
            for (int j = 0; j < n; j++)
                if (up[i - 1][j] != -1)
                    up[i][j] = up[i - 1][up[i - 1][j]];
    }

    void dfs (int u) {
        for (int v : adj[u])
            if (v != up[0][u]) {
                depth[v] = depth[u] + 1;
                up[0][v] = u;
                dfs (v);
            }
    }

    int lca (int u, int v) {
        if (depth[u] < depth[v])
            swap (u, v);

        for (int i = lg - 1; i >= 0; i--)
            if (depth[u] - (1 << i) >= depth[v])
                u = up[i][u];

        if (u == v)
            return u;

        for (int i = lg - 1; i >= 0; i--)
            if (up[i][u] != up[i][v]) {
                u = up[i][u];
                v = up[i][v];
            }

        return up[0][u];
    }

    int dist (int u, int v) {
        return depth[u] + depth[v] - 2 * depth[lca (u, v)];
    }

    int kthAnc (int u, int k) {
        if (k > depth[u])
            return -1;

        for (int i = 0; i < lg; i++)
            if (k >> i & 1)
                u = up[i][u];

        return u;
    }
};
endsnippet
snippet LCA "lca"
struct LCA {
    int n;
    vector<int> in, out, depth, path, ret;
    vector<vector<int>> adj;
    RMQ<int> rmq;

    LCA (int _n) : n (_n), in (n, -1), out (n), depth (n), adj (n), rmq ({}) {}

    void addEdge (int u, int v) {
        adj[u].push_back (v);
        adj[v].push_back (u);
    }

    void init (int r = -1) {
        if (r == -1) {
            for (int u = 0; u < n; u++)
                if (in[u] == -1)
                    dfs (u, -1);

        } else {
            dfs (r, -1);
        }

        rmq = RMQ<int> (ret);
    }

    void dfs (int u, int p) {
        in[u] = (int) path.size();
        path.push_back (u);
        ret.push_back (in[u]);

        for (int v : adj[u])
            if (v != p) {
                depth[v] = depth[u] + 1;
                dfs (v, u);
                path.push_back (u);
                ret.push_back (in[u]);
            }

        out[u] = (int) path.size();
    }

    int lca (int u, int v) {
        if (in[u] > in[v])
            swap (u, v);

        return path[rmq.query (in[u], in[v])];
    }

    int dist (int u, int v) {
        return depth[u] + depth[v] - 2 * depth[lca (u, v)];
    }

    bool anc (int u, int v) {
        return in[u] <= in[v] && out[v] <= out[u];
    }
};
endsnippet
snippet RMQ "rmq"
template<typename T>
struct RMQ {
    vector<vector<T>> spt;

    RMQ (const vector<T> &a) : spt (1, a) {
        int n = (int) a.size();

        for (int j = 1; 1 << j <= n; j++) {
            spt.emplace_back (n - (1 << j) + 1);

            for (int i = 0; i + (1 << j) <= n; i++)
                spt[j][i] = min (spt[j - 1][i], spt[j - 1][i + (1 << (j - 1) )]);
        }
    }

    T query (int i, int j) {
        int k = __lg (j - i + 1);
        return min (spt[k][i], spt[k][j - (1 << k) + 1]);
    }
};
endsnippet
snippet Dsegtree "dynamic"
struct DynamicMaxSubarraySum {
    struct node {
        int pref, suf, val, sum;
    };
    int N;
    int neutral;
    vector<node> t;
    DynamicMaxSubarraySum (int _N, int assign_value) {
        neutral = assign_value;
        N = _N;
        t.resize (4 * N);

        for (int i = 0; i < 4 * N; i++) t[i] = {0, 0, 0, 0};

        build (1, 0, N - 1);
    }
    void build (int i, int l, int r) {
        if (l == r) {
            t[i].pref = t[i].suf = t[i].val = t[i].sum = neutral;
            return;
        }

        int mid = (l + r) >> 1;
        build (2 * i, l, mid);
        build (2 * i + 1, mid + 1, r);
        t[i] = merge (t[2 * i], t[2 * i + 1]);
    }
    node merge (node a, node b) {
        node c;
        c.pref = max (a.pref, a.sum + b.pref);
        c.suf = max (b.suf, b.sum + a.suf);
        c.val = max ({a.val, b.val, a.suf + b.pref});
        c.sum = a.sum + b.sum;
        return c;
    }

    void modif (int i, int l, int r, int pos, int val) {
        if (l > pos || r < pos) return;

        if (l == pos && r == pos) {
            t[i].pref = t[i].suf = t[i].val = t[i].sum = val;
            return;
        }

        int mid = (l + r) >> 1;
        modif (2 * i, l, mid, pos, val);
        modif (2 * i + 1, mid + 1, r, pos, val);
        t[i] = merge (t[2 * i], t[2 * i + 1]);
    }
    node query (int i, int l, int r, int tl, int tr) {
        if (l > tr || r < tl) return {0, 0, 0, 0};

        if (l >= tl && r <= tr) return t[i];

        int mid = (l + r) >> 1;
        return merge (query (2 * i, l, mid, tl, tr), query (2 * i + 1, mid + 1, r, tl, tr) );
    }

    void modify (int pos, int val) {
        modif (1, 0, N - 1, pos, val);
    }
    node query (int l, int r) {
        return query (1, 0, N - 1, l, r);
    }
    node query (int pos) {
        return query (1, 0, N - 1, pos, pos);
    }
};
endsnippet
snippet Minstack "minstack"
class MinStack {
  public:
    std::stack<std::pair<int, int>> st;
    void push (int x) {
        int current_min = st.empty() ? x : std::min (x, st.top().second);
        st.push ({x, current_min});
    }
    void pop() {if (!st.empty() ) st.pop(); }
    int top() const { return st.top().first; }
    int getMin() const { return st.top().second; }
    bool empty() const { return st.empty(); }
    int size() const { return st.size(); }
    void swap (MinStack &other) {
        st.swap (other.st);
    }
};
endsnippet
snippet Mindeque "mindeque"
class MinDeque {
  public:
    MinStack l, r, t;
    void rebalance() {
        if (r.empty() ) l.swap (r);

        for (int sz = r.size() / 2; sz--; r.pop() ) t.push (r.top() );

        while (!r.empty() ) l.push (r.top() ), r.pop();

        while (!t.empty() ) r.push (t.top() ), t.pop();
    }
    int getMin() {
        if (l.empty() ) return r.getMin();

        if (r.empty() ) return l.getMin();

        return std::min (l.getMin(), r.getMin() );
    }
    bool empty() { return l.empty() && r.empty(); }
    int size() { return l.size() + r.size(); }
    void push_front (int x) { l.push (x); }
    void push_back (int x) { r.push (x); }
    void pop_front() { if (l.empty() ) rebalance(); l.pop(); }
    void pop_back() { if (r.empty() ) rebalance(); r.pop(); }
    int front() { if (l.empty() ) rebalance(); return l.top(); }
    int back() { if (r.empty() ) rebalance(); return r.top(); }
    void swap (MinDeque &x) { l.swap (x.l), r.swap (x.r); }
};

endsnippet
