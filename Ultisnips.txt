snippet snips "show snippets"
/*
   1. normal -> templete
   2. simple -> simple templete
   3. c++ -> basic c++ templete
   4. segtree -> segtree
   5. lazysegtree -> lazysegtree
   6. primes ->"prime operations
   7. binpower -> binexpo
   8. inverse -> modinverse
   9. orderedset -> pbds
   10. combinations -> nCr
   11. dijkstra -> dijkstra
   12. DSU -> UnionFind
   13. Graph -> Graph
   14. Zalgo -> Z algorithm
   15. StringHash -> string hashing
 */
endsnippet
snippet normal "normal"
// Author : md_nihal

#include "bits/stdc++.h"
using namespace std;

#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math,inline")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,lzcnt,mmx,abm,avx,avx2,fma")
#define Md_Nihal ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef unsigned long long ull;
#define endl "\n"
#define int long long
#define i_64 int64_t
#define sz(a) (int)a.size()
#define vi vector<int>
#define pii pair<int,int>
#define vpi vector<pii>
#define all(x) x.begin(),x.end()
#define ALL(x) x.rbegin(),x.rend()
#define rep(i,x,n) for (int i = x; i <x+n; i++)
const int mod = 1E9 + 7, inf = 1E18, N = 1E6 + 7, MAX = 1E14 + 4;

template<class T, class V>istream &operator>> (istream &in, pair<T, V> &a) {in >> a.first >> a.second; return in;}
template<class T>istream &operator>> (istream &in, vector<T> &a) {for (auto &i : a) {in >> i;} return in;}
template<class T, class V>ostream &operator<< (ostream &os, pair<T, V> &a) {os << a.first << " " << a.second; return os;}
template<class T>ostream &operator<< (ostream &os, vector<T> &a) {for (auto &i : a) {os << i << " ";} return os;}

/*----------------------------------------------- PBDS --------------------------------------------*/

using namespace __gnu_pbds;
template<class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;
template<class key, class value, class cmp = less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;

/*----------------------------------------------- PBDS ends --------------------------------------------*/

#ifndef ONLINE_JUDGE
    #include "/home/anonymous/Templates/debug.hpp"
#else
    #define debug(x...);
#endif

/*=========================================== SOLUTION ===========================================*/

void ____solve() {

    $0

}

/*============================================= MAIN =============================================*/

int32_t  main() {
    Md_Nihal;
    int Testcases = 1;    $1cin >> Testcases;

    for (int i = 0; i < Testcases; i++, ____solve(), cout << endl);
}
endsnippet

snippet simple "basic"
#include "bits/stdc++.h"
using namespace std;
#define all(x) x.begin(),x.end()
#define ALL(x) x.rbegin(),x.rend()
#define int long long
const int mod = 1E9 + 7, MAX = 1E7 + 7, N = 1E5 + 5, inf = 1E18 ;

#ifndef ONLINE_JUDGE
    #include "/home/anonymous/Templates/debug.hpp"
#else
    #define debug(x...);
#endif

/*=========================================== SOLUTION ===========================================*/

void ____solve() {

    $0

}

/*============================================= MAIN =============================================*/

int32_t main() {
    int Test = 1;  $1cin >> Test;

    for (int i = 0; i < Test; i++, ____solve(), cout << endl);
}

endsnippet
snippet c++ "basic"
#include<bits/stdc++.h>
using namespace std;
void __solve() {

    $0
}

int main() {
    int T = 1; $1cin >> T;

    while (T--) __solve();
}
endsnippet
snippet segtree "segmenttree"
template<typename T>
struct SegmentTree {
    int n;
    const T id;
    vector<T> st;

    T merge (const T &a, const T &b) {
        return a + b;
    }

    SegmentTree (int _n) : n (_n), st (2 * n, id) {}

    SegmentTree (const vector<T> &a) : n ( (int) a.size() ), st (2 * n) {
        for (int i = 0; i < n; i++)
            st[i + n] = a[i];

        for (int i = n - 1; i > 0; i--)
            st[i] = merge (st[i << 1], st[i << 1 | 1]);
    }

    T query (int l, int r) {
        T ls = id, rs = id;

        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
            if (l & 1) ls = merge (ls, st[l++]);

            if (r & 1) rs = merge (st[--r], rs);
        }

        return merge (ls, rs);
    }

    void update (int p, T val) {
        for (st[p += n] = val, p >>= 1; p > 0; p >>= 1)
            st[p] = merge (st[p << 1], st[p << 1 | 1]);
    }
};
endsnippet
snippet lazysegtree "lazysegmenttree"
template<typename T>
class LazySegmentTree {
  private:
    vector<T> tree, lazy;
    vector<T> nums;
    int n;
    T identity;

    bool isValid (int idx) {
        return idx >= 0 && idx < n;
    }

    T combine (T left, T right) {
        return left + right; // Change this for different operations
    }

    void apply (T &a, T b, int length) {
        a += b * length; // Change this for different operations
    }

    void build (int node, int start, int end) {
        if (start == end) {
            tree[node] = nums[start];

        } else {
            int mid = start + (end - start) / 2;
            build (2 * node, start, mid);
            build (2 * node + 1, mid + 1, end);
            tree[node] = combine (tree[2 * node], tree[2 * node + 1]);
        }
    }

    void push (int node, int start, int end) {
        if (lazy[node] != identity) {
            apply (tree[node], lazy[node], end - start + 1);

            if (start != end) {
                lazy[2 * node] = combine (lazy[2 * node], lazy[node]);
                lazy[2 * node + 1] = combine (lazy[2 * node + 1], lazy[node]);
            }

            lazy[node] = identity;
        }
    }

    void updateRange (int node, int start, int end, int l, int r, T val) {
        push (node, start, end);

        if (r < start || end < l) {
            return;
        }

        if (l <= start && end <= r) {
            lazy[node] = combine (lazy[node], val);
            push (node, start, end);
            return;
        }

        int mid = start + (end - start) / 2;
        updateRange (2 * node, start, mid, l, r, val);
        updateRange (2 * node + 1, mid + 1, end, l, r, val);
        tree[node] = combine (tree[2 * node], tree[2 * node + 1]);
    }

    T queryRange (int node, int start, int end, int l, int r) {
        push (node, start, end);

        if (r < start || end < l) {
            return identity;
        }

        if (l <= start && end <= r) {
            return tree[node];
        }

        int mid = start + (end - start) / 2;
        T leftResult = queryRange (2 * node, start, mid, l, r);
        T rightResult = queryRange (2 * node + 1, mid + 1, end, l, r);
        return combine (leftResult, rightResult);
    }

  public:
    LazySegmentTree (const vector<T> &nums, T identity) : nums (nums), identity (identity) {
        n = nums.size();
        tree.resize (4 * n, identity);
        lazy.resize (4 * n, identity);
        build (1, 0, n - 1);
    }

    LazySegmentTree (int size, T identity) : identity (identity) {
        n = size;
        nums.resize (n, identity);
        tree.resize (4 * n, identity);
        lazy.resize (4 * n, identity);
        build (1, 0, n - 1);
    }

    void updateRange (int l, int r, T val) {
        updateRange (1, 0, n - 1, l, r, val);
    }

    T queryRange (int l, int r) {
        return queryRange (1, 0, n - 1, l, r);
    }
};
endsnippet

snippet primes "prime operations"
bool marked[N];
int  sp[N];

void Sieve() {
    for (int i = 2; i < N; i += 2)  sp[i] = 2;//even numbers have smallest prime factor 2

    for (int i = 3; i < N; i += 2) {
        if (!marked[i]) {
            sp[i] = i;

            for (int j = i; (j * i) < N; j += 2) {
                if (!marked[j * i]) marked[j * i] = true, sp[j * i] = i;
            }
        }
    }
}


vector <int> factorize (int k) {
    vector <int> ans;

    while (k > 1) {
        ans.push_back (sp[k]);
        k /= sp[k];
    }

    return ans;
}
endsnippet

snippet binpower "binpow"
template<typename T>
T binpow (T a, T b) {
    T ans = 1;

    while (b) {
        if (b & 1) {
            ans = 1LL * ans * a % mod;
        }

        a = 1LL * a * a % mod;
        b >>= 1;
    }

    return ans;
}
endsnippet

snippet inverse "any mod inverse"
ll inv (ll a, ll m) {
    if (a == 1) {
        return 1;
    }

    return (1LL - inv (m % a, a) * m) / a + m;
}
endsnippet

snippet orderedset "orderedset"
using namespace __gnu_pbds;
template<class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;
template<class key, class value, class cmp = less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;
endsnippet
snippet FenwickTree "FenwickTree"
class FenwickTree {
    vector<int>tree;
    int size;
  public:
    FenwickTree (int n) : tree (n + 1, 0), size (n) {};
    void update (int idx, int add) {
        for (++idx; idx <= size; idx += idx & -idx) {
            tree[idx] += add;
        }
    }
    int query (int idx) {
        int sum = 0;

        for (++idx; idx > 0; idx -= idx & -idx) {
            sum += tree[idx];
        }

        return sum;
    }
    int sum (int l, int r) {
        return query (r) - query (l - 1);
    }
    int lower_bound (int val) {
        int ind = 0, sum = 0;

        for (int i = 20; i >= 0; i--) {
            if ( ind + (1 << i) <= size && tree[ind + (1 << i)] + sum < val) {
                ind += (1 << i);
                sum += tree[ind];
            }
        }

        return ind + 1;
    }
};
endsnippet
snippet combinations "combinations"
int fact[N];
int exp (int a, int b) {
    int ans = 1;
    a %= mod;

    while (b) {
        if (b & 1) ans = (ans * 1ll * a) % mod;

        b >>= 1;
        a = (a * 1ll * a) % mod;
    }

    return ans;
}
int nCr (int a, int b) {
    if (b > a) return 0;

    return fact[a] * 1ll * exp (fact[b] * 1ll * fact[a - b] % mod, mod - 2) % mod;
}
endsnippet
snippet dijkstra "dikstra"
vector<int>dikstra (vector<vector<pii>> &graph, int source, int n) {
    priority_queue<pii, vector<pii>, greater<pii>>pq;
    vector<int>dist (n, inf);
    dist[source] = 0;
    pq.push ({0, source});

    while (!pq.empty() ) {
        auto [currDistance, node] = pq.top();
        pq.pop();

        if (currDistance != dist[node]) continue;

        for (auto [neighbour, weight] : graph[node]) {
            if (dist[neighbour] > dist[node] + weight) {
                dist[neighbour] = dist[node] + weight; pq.push ({dist[neighbour], neighbour});
            }
        }
    }

    return dist;
}
endsnippet
snippet DSU "Union Find"
class DSU {
    std::vector<int>par, size;
  public:
    DSU (int n) : par (n + 5), size (n + 5) {
        for (int i = 1; i <= n; i++) size[i] = 1, par[i] = i;
    }
    int parent (int x) {
        return (par[x] == x ? x : parent (par[x]) );
    }
    void unite (int x, int y) {
        int rootx = parent (x), rooty = parent (y);

        if (rootx == rooty) return;

        if (size[rootx] < size[rooty]) swap (rootx, rooty);

        par[rooty] = rootx;
        size[rootx] += size[rooty];
    }
    bool connected (int x, int y) {
        return parent (x) == parent (y);
    }
    int get_size (int x) {
        return size[parent (x)];
    }
};
endsnippet
snippet Graph "graph"
template <typename T>
class Graph {
  public:
    Graph (int n) : n (n), adj (n) {}
    void add (T u, T v) {
        adj[u].push_back (v);
        adj[v].push_back (u);
    }
    const vector<vector<T>> &get() const {
        return adj;
    }
  private:
    int n;
    vector<vector<T>> adj;
};
endsnippet
snippet Zalgo "z algorithm"
class Zalgo {
  private:
    string text;
    string pattern;
    vector<int> Z;
    vector<int> calculateZ (const string &s) {
        int n = s.length();
        vector<int> Z (n, 0);
        int l = 0, r = 0;

        for (int i = 1; i < n; ++i) {
            if (i <= r)
                Z[i] = min (r - i + 1, Z[i - l]);

            while (i + Z[i] < n && s[Z[i]] == s[i + Z[i]])
                ++Z[i];

            if (i + Z[i] - 1 > r) {
                l = i;
                r = i + Z[i] - 1;
            }
        }

        return Z;
    }
  public:
    ZAlgorithm (const string &txt, const string &pat) : text (txt), pattern (pat) {
        string combined = pattern + "$" + text;
        Z = calculateZ (combined);
    }
    vector<int> findOccurrences() {
        int patternLength = pattern.length();
        vector<int> occurrences;

        for (int i = patternLength + 1; i < Z.size(); ++i) {
            if (Z[i] == patternLength)
                occurrences.push_back (i - patternLength - 1);
        }

        return occurrences;
    }
};
endsnippet
snippet StringHash "string hashing"
class StringHash {
  public:
    const int base = 31;
    const int mod = 1e9 + 9;
    std::vector<int> hash;
    std::vector<int> power;

    StringHash (const std::string &s) {
        int n = s.size();
        hash.resize (n + 1);
        power.resize (n + 1);
        hash[0] = 0;
        power[0] = 1;

        for (int i = 1; i <= n; ++i) {
            hash[i] = (1LL * hash[i - 1] * base + (s[i - 1] - 'a' + 1) ) % mod;
            power[i] = 1LL * power[i - 1] * base % mod;
        }
    }

    int getHash (int l, int r) const {
        int result = (hash[r] - 1LL * hash[l - 1] * power[r - l + 1] % mod + mod) % mod;
        return result;
    }

    int HashString() const {
        return hash[hash.size() - 1];
    }

    int combineHashes (int hash1, int hash2, int len2) const {
        return (1LL * hash1 * power[len2] % mod + hash2) % mod;
    }

    bool isEqual (const std::string &s1, int l1, int r1, const std::string &s2, int l2, int r2) const {
        if (r1 - l1 != r2 - l2)
            return false;

        return getHash (l1, r1) == getHash (l2, r2);
    }
};

endsnippet
